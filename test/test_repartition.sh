#!/bin/bash

export SHUNIT2_SCRIPTS=../lib/shunit2-2.1.6/src

#########################################################################################
## Tests displayLine
#########################################################################################

testDisplayLine_pas_de_donnees(){

  cat > $LOG_FILE_REP << EOF
EOF

	std=`displayLine "01:00:00" 0 >&1`
	assertEquals "Pas de données" "01:00:00 ( 0.00%)" "$std"
}

testDisplayLine_donnees_existantes_cas_nominal(){
  cat > $LOG_FILE_REP << EOF
01:00:00
01:00:00
01:00:00
01:30:00
03:30:00
EOF

	std=`displayLine "01:00:00" 11 >&1`
	assertEquals "Cas nominal" "01:00:00 ############################ (27.27% ,3/11)" "$std"
}

testDisplayLine_donnees_existantes_horaire_non_trouves(){
  cat > $LOG_FILE_REP << EOF
01:00:00
01:00:00
01:30:00
03:30:00
EOF

	std=`displayLine "10:00:00" 10 >&1`
	assertEquals "Horaires non trouvés" "10:00:00 ( 0.00%)" "$std"
}


# cas limites
testDisplayLine_donnees_existantes_pas_erreurs_totales(){
# cas immprobable mais testés
  cat > $LOG_FILE_REP << EOF
01:00:00
01:00:00
01:30:00
03:30:00
EOF

	std=`displayLine "01:00:00" 0 >&1`
	assertEquals "Cas limite: pas d'erreur totales" "01:00:00 ( 0.00%)" "$std"
}

testDisplayLine_donnees_existantes_monbre_erreur_negative(){
# cas immprobable mais testés
  cat > $LOG_FILE_REP << EOF
01:00:00
01:00:00
01:30:00
03:30:00
EOF

	std=`displayLine "01:00:00" -1 >&1`
	assertEquals "Cas limite: nombre d'erreurs négatives" "01:00:00 ( 0.00%)" "$std"
}

testDisplayLine_pas_de_fichier(){
# cas immprobable mais testés
  rm -f $LOG_FILE_REP 

	std=`displayLine "01:00:00" -1 >&1`
	assertEquals "Cas limite: pas de fichier" "01:00:00 ( 0.00%)" "$std"
}


#########################################################################################
## Tests calculeLaRepartition
#########################################################################################

testCalculeLaRepartition_pas_erreurs_dans_logs(){

	cat > $LOG_FILE << EOF
[01/07/2011 01:29:12.001-http-a-8080-10$549007] <INFO> ca roule
[01/07/2011 09:42:45.579-http-a-8080-12$7984459] <WARN> Unable to create account for candidat with email=brigitte@hotmail.fr
EOF

    EXPECTED="00:00:00 ( 0.00%)
00:30:00 ( 0.00%)
01:00:00 ( 0.00%)
01:30:00 ( 0.00%)
02:00:00 ( 0.00%)
02:30:00 ( 0.00%)
03:00:00 ( 0.00%)
03:30:00 ( 0.00%)
04:00:00 ( 0.00%)
04:30:00 ( 0.00%)
05:00:00 ( 0.00%)
05:30:00 ( 0.00%)
06:00:00 ( 0.00%)
06:30:00 ( 0.00%)
07:00:00 ( 0.00%)
07:30:00 ( 0.00%)
08:00:00 ( 0.00%)
08:30:00 ( 0.00%)
09:00:00 ( 0.00%)
09:30:00 ( 0.00%)
10:00:00 ( 0.00%)
10:30:00 ( 0.00%)
11:00:00 ( 0.00%)
11:30:00 ( 0.00%)
12:00:00 ( 0.00%)
12:30:00 ( 0.00%)
13:00:00 ( 0.00%)
13:30:00 ( 0.00%)
14:00:00 ( 0.00%)
14:30:00 ( 0.00%)
15:00:00 ( 0.00%)
15:30:00 ( 0.00%)
16:00:00 ( 0.00%)
16:30:00 ( 0.00%)
17:00:00 ( 0.00%)
17:30:00 ( 0.00%)
18:00:00 ( 0.00%)
18:30:00 ( 0.00%)
19:00:00 ( 0.00%)
19:30:00 ( 0.00%)
20:00:00 ( 0.00%)
20:30:00 ( 0.00%)
21:00:00 ( 0.00%)
21:30:00 ( 0.00%)
22:00:00 ( 0.00%)
22:30:00 ( 0.00%)
23:00:00 ( 0.00%)
23:30:00 ( 0.00%)"

	std=`calculeLaRepartition $LOG_FILE>&1`
	assertEquals "nombre <ERROR> trouvés" "$EXPECTED" "$std"
}


testCalculeLaRepartition_erreurs_dans_logs(){

	cat > $LOG_FILE << EOF
[01/07/2011 01:29:12.001-http-a-8080-10$549007] <INFO> ca roule
[01/07/2011 09:42:45.579-http-a-8080-12$7984459] <WARN> Unable to create account for candidat with email=brigitte@hotmail.fr
[01/07/2011 21:42:45.579-http-a-8080-12$7984459] <ERROR> Erreur au milieu de nul part
[01/07/2011 09:12:45.579-http-a-8080-12$7984459] <ERROR> une erreur
[01/07/2011 09:34:00.579-http-a-8080-12$7984459] <ERROR> errueureurueureuru
[01/07/2011 09:54:45.579-http-a-8080-12$7984459] <INFO> Unable to create account for candidat with email=brigitte@hotmail.fr
[01/07/2011 09:58:45.579-http-a-8080-12$7984459] <ERROR> ERRRRRRRROOOOOORR
[01/07/2011 19:05:05.579-http-a-8080-12$7984459] <ERROR> ERRRRRRRROOOOOORR
EOF

    EXPECTED="00:00:00 ( 0.00%)
00:30:00 ( 0.00%)
01:00:00 ( 0.00%)
01:30:00 ( 0.00%)
02:00:00 ( 0.00%)
02:30:00 ( 0.00%)
03:00:00 ( 0.00%)
03:30:00 ( 0.00%)
04:00:00 ( 0.00%)
04:30:00 ( 0.00%)
05:00:00 ( 0.00%)
05:30:00 ( 0.00%)
06:00:00 ( 0.00%)
06:30:00 ( 0.00%)
07:00:00 ( 0.00%)
07:30:00 ( 0.00%)
08:00:00 ( 0.00%)
08:30:00 ( 0.00%)
09:00:00 ###################### (20.00% ,1/5)
09:30:00 ########################################## (40.00% ,2/5)
10:00:00 ( 0.00%)
10:30:00 ( 0.00%)
11:00:00 ( 0.00%)
11:30:00 ( 0.00%)
12:00:00 ( 0.00%)
12:30:00 ( 0.00%)
13:00:00 ( 0.00%)
13:30:00 ( 0.00%)
14:00:00 ( 0.00%)
14:30:00 ( 0.00%)
15:00:00 ( 0.00%)
15:30:00 ( 0.00%)
16:00:00 ( 0.00%)
16:30:00 ( 0.00%)
17:00:00 ( 0.00%)
17:30:00 ( 0.00%)
18:00:00 ( 0.00%)
18:30:00 ( 0.00%)
19:00:00 ###################### (20.00% ,1/5)
19:30:00 ( 0.00%)
20:00:00 ( 0.00%)
20:30:00 ( 0.00%)
21:00:00 ( 0.00%)
21:30:00 ###################### (20.00% ,1/5)
22:00:00 ( 0.00%)
22:30:00 ( 0.00%)
23:00:00 ( 0.00%)
23:30:00 ( 0.00%)"

	std=`calculeLaRepartition $LOG_FILE>&1`

	assertEquals "nombre <ERROR> trouvés" "$EXPECTED" "$std"
}


# cas limite
testCalculeLaRepartition_pas_de_logs(){

	cat > $LOG_FILE << EOF
EOF

    EXPECTED="00:00:00 ( 0.00%)
00:30:00 ( 0.00%)
01:00:00 ( 0.00%)
01:30:00 ( 0.00%)
02:00:00 ( 0.00%)
02:30:00 ( 0.00%)
03:00:00 ( 0.00%)
03:30:00 ( 0.00%)
04:00:00 ( 0.00%)
04:30:00 ( 0.00%)
05:00:00 ( 0.00%)
05:30:00 ( 0.00%)
06:00:00 ( 0.00%)
06:30:00 ( 0.00%)
07:00:00 ( 0.00%)
07:30:00 ( 0.00%)
08:00:00 ( 0.00%)
08:30:00 ( 0.00%)
09:00:00 ( 0.00%)
09:30:00 ( 0.00%)
10:00:00 ( 0.00%)
10:30:00 ( 0.00%)
11:00:00 ( 0.00%)
11:30:00 ( 0.00%)
12:00:00 ( 0.00%)
12:30:00 ( 0.00%)
13:00:00 ( 0.00%)
13:30:00 ( 0.00%)
14:00:00 ( 0.00%)
14:30:00 ( 0.00%)
15:00:00 ( 0.00%)
15:30:00 ( 0.00%)
16:00:00 ( 0.00%)
16:30:00 ( 0.00%)
17:00:00 ( 0.00%)
17:30:00 ( 0.00%)
18:00:00 ( 0.00%)
18:30:00 ( 0.00%)
19:00:00 ( 0.00%)
19:30:00 ( 0.00%)
20:00:00 ( 0.00%)
20:30:00 ( 0.00%)
21:00:00 ( 0.00%)
21:30:00 ( 0.00%)
22:00:00 ( 0.00%)
22:30:00 ( 0.00%)
23:00:00 ( 0.00%)
23:30:00 ( 0.00%)"

	std=`calculeLaRepartition $LOG_FILE>&1`

	assertEquals "nombre <ERROR> trouvés" "$EXPECTED" "$std"
}

#########################################################################################
## Launcher
#########################################################################################

oneTimeSetUp(){
	. ../main/repartition.sh
	LOG_FILE=${__shunit_tmpDir}/stlog
}

. ${SHUNIT2_SCRIPTS}/shunit2

